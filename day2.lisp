(in-package :aoc-2022)

(defun parse-game ()
  (with-monad
    (assign play1 (either (then (parse-character #\A) (unit :rock))
                          (either (then (parse-character #\B) (unit :paper))
                                  (then (parse-character #\C) (unit :sizzors)))))
    (parse-space)
    (assign play2 (either (then (parse-character #\X) (unit :lose))
                          (either (then (parse-character #\Y) (unit :draw))
                                  (then (parse-character #\Z) (unit :win)))))
    (unit (list play1 play2))))
(defun parse-file ()
  (parse-lines (parse-game)))


(defun score (game)
  (+ (case (choose game)
       (:rock 1)
       (:paper 2)
       (:sizzors 3)
       (t 0))
     (* 3 (case (second game)
            (:lose 0)
            (:draw 1)
            (:win 2)
            (t 0)))))
(defun choose (game)
  (case (first game)
    (:rock (case (second game)
             (:draw :rock)
             ( :win :paper)
             ( :lose :sizzors)))
    (:paper (case (second game)
             ( :lose :rock)
             ( :draw :paper)
             ( :win :sizzors)))
    (:sizzors (case (second game)
             ( :win :rock)
             ( :lose :paper)
             ( :draw :sizzors))))
  )
(defun outcome (game)
  (case (first game)
    (:rock (case (second game)
             (:rock :draw)
             (:paper :win)
             (:sizzors :lose)))
    (:paper (case (second game)
             (:rock :lose)
             (:paper :draw)
             (:sizzors :win)))
    (:sizzors (case (second game)
             (:rock :win)
             (:paper :lose)
             (:sizzors :draw)))))
(defun day2 (input)
  (let* ((parsed (run-parser (parse-file) input)))
    (reduce #'+ (mapcar #'score parsed))
    ))
