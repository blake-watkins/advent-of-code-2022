(in-package :aoc-2022)

(defun parse-file ()
  (parse-lines (parse-list (parse-alphanumeric) "")))

(defun neighbours (pos squares)
  (remove-if-not (lambda (s)
                   (let ((cur (gethash pos squares))
                         (dest (gethash s squares)))
                     (and dest
                          (<= (char-code dest) (1+ (char-code (gethash pos squares))))
           )))
                 (mapcar (lambda (dir)
                           (map 'list #'+ pos dir))
                         '((0 1) (0 -1) (1 0) (-1 0)))))

(defun day12 (input)
  (let* ((parsed (run-parser (parse-file) input))
         (squares (make-hash-table :test 'equal))
         (start-end
           (iter
             (with start = nil)
             (with end = nil)
             (for r from 0)
             (for row in parsed)
             (iter
               (for c from 0)
               (for square in row)
               (setf (gethash (list r c) squares) square)
               (when (char= square #\S)
                 (setf start (list r c))
                 (setf (gethash (list r c) squares) #\a))
               (when (char= square #\E)
                 (setf end (list r c))
                 (setf (gethash (list r c) squares) #\z)))
             (finally (return (list start end))))))
    (labels ((neighbour-fn (cur)
               (mapcar (lambda (n) (list n 1)) (neighbours cur squares)))
             (vertex-fn (vertex parent distance)
               (format t "~a ~a~%" vertex distance)
               (when (equal vertex (second start-end))
                 (error "found vertex ~a ~a" vertex distance))))
      (dijkstra (first start-end) #'vertex-fn #'neighbour-fn))
    squares))
